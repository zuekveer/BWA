
services:
  app:
    build: .
    env_file:
      - .env
    ports:
      - "8088:8088"
    networks:
      - zkr-network
    restart: on-failure
    depends_on:
      - db

  db:
    image: postgres:16
    environment:
      - "POSTGRES_DB=${DB_DATABASE}"
      - "POSTGRES_USER=${DB_USER}"
      - "POSTGRES_PASSWORD=${DB_PASSWORD}"
    ports:
      - "${DB_HOST_PORT}:${DB_PORT}"
#TODO:add volume
#    volumes:
#      - ./pgdata:/var/lib/postgresql/data  # Persist data
    networks:
      - zkr-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4_container
    restart: always
    ports:
      - '8888:80'
    environment:
      PGADMIN_DEFAULT_EMAIL: user-name@domain-name.com
      PGADMIN_DEFAULT_PASSWORD: password

  migration:
    image: migrations
    build:
      context: .
      dockerfile: migration.Dockerfile
    environment:
      GOOSE_DRIVER: postgres
      GOOSE_DBSTRING: "host=db user=${DB_USER} password=${DB_PASSWORD} dbname=${DB_DATABASE} sslmode=disable"
    command: "/opt/bin/goose -dir /opt/go/app/db/migrations up"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - zkr-network

  zookeeper:
    image: confluentinc/cp-zookeeper:5.4.0
    hostname: zookeeper
    container_name: zookeeper
    env_file:
      - .env
  kafka:
    image: confluentinc/cp-kafka:5.3.0
    hostname: kafka
    container_name: kafka
    env_file:
      - .env
    ports:
      - "19092:19092"
    depends_on:
      - zookeeper
    healthcheck:
      test: nc -z localhost ${KAFKA_HEALTHCHECK_PORT} || exit -1
      interval: 5s
      timeout: 10s
      retries: 10

networks:
  zkr-network:
    driver: bridge